async function wait_for_working_hours(start_time, end_time) {
    while (true) {
      var now = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      var start = new Date().setHours(parseInt(start_time.split(':')[0]), parseInt(start_time.split(':')[1]), 0, 0);
      var end = new Date().setHours(parseInt(end_time.split(':')[0]), parseInt(end_time.split(':')[1]), 0, 0);
      if (start <= new Date() && new Date() <= end) {
        return;
      }
      else {
        async function update_leads() {
          var i = 0;
          while (i < 10) {
            console.log("Waiting for working hours...");
            await new Promise(r => setTimeout(r, 60000));
            i += 1;
          }
          // calculate the time to wait before updating leads
          var start_plus_6_hours = new Date().setHours(parseInt(start_time.split(':')[0]) + 6, parseInt(start_time.split(':')[1]), 0, 0);
          var time_to_wait = (start_plus_6_hours - new Date()) / 1000;
          // wait for the required time
          console.log("Waiting for 6 hours within working hours...");
          await new Promise(r => setTimeout(r, time_to_wait * 1000));
          // update the leads
          console.log("Updating leads after 6 hours within working hours...");
        }
        await update_leads();
      }
    }
  }
  
  wait_for_working_hours("10:00", "19:00");






  if datetime.datetime.combine(datetime.date.today(), end) < datetime.datetime.now():
    continue  # working hours are over, skip to the next iteration of the loop
start_plus_6_hours = datetime.datetime.combine(datetime.date.today(), start) + datetime.timedelta(hours=6)
if start_plus_6_hours < datetime.datetime.now():
    continue  # it's already past the time to update leads, skip to the next iteration of the loop
time_to_wait = (start_plus_6_hours - datetime.datetime.now()).total_seconds()

  